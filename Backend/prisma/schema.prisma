generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String         @id @default(uuid())
  email           String         @unique
  passwordHash    String?
  name            String?
  emailVerifiedAt DateTime?
  lastLoginAt     DateTime?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  image           String?
  accounts        Account[]
  memberships     Membership[]
  ownedOrgs       Organization[]
  createdSecrets  Secret[]

  @@index([email])
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Organization {
  id          String       @id @default(uuid())
  name        String
  slug        String       @unique
  description String?
  ownerId     String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  memberships Membership[]
  owner       User         @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  projects    Project[]

  @@index([ownerId])
  @@index([slug])
}

model Membership {
  id             String       @id @default(uuid())
  userId         String
  organizationId String
  role           Role
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@index([organizationId])
  @@index([userId])
}

model Project {
  id             String       @id @default(uuid())
  name           String
  description    String?
  organizationId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  secrets        Secret[]

  @@index([organizationId])
}

model Secret {
  id          String     @id @default(uuid())
  name        String
  description String?
  type        SecretType @default(API_KEY)
  value       String
  encrypted   Boolean    @default(true)
  projectId   String
  createdById String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  environment String     @default("development")
  createdBy   User       @relation(fields: [createdById], references: [id], onDelete: Cascade)
  project     Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([createdById])
  @@index([type])
  @@index([environment])
  @@unique([projectId, name, environment])
}

enum Role {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum SecretType {
  API_KEY
  DATABASE_URL
  JWT_SECRET
  OAUTH_CLIENT_SECRET
  WEBHOOK_SECRET
  SSH_KEY
  CERTIFICATE
  PASSWORD
  OTHER
}
