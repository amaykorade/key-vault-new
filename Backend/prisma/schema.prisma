generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String           @id @default(uuid())
  email            String           @unique
  passwordHash     String?
  name             String?
  emailVerifiedAt  DateTime?
  lastLoginAt      DateTime?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  image            String?
  accounts         Account[]
  memberships      Membership[]
  ownedOrgs        Organization[]
  createdSecrets   Secret[]
  teamMemberships  TeamMembership[]
  createdTeams     Team[]
  sentInvitations  Invitation[]
  projectMemberships ProjectMember[]
  auditLogs        AuditLog[]
  createdApiKeys   ProjectApiKey[]
  apiTokens        UserApiToken[]

  @@index([email])
}

/// Personal Access Token (user-scoped) that inherits user's RBAC
model UserApiToken {
  id           String   @id @default(uuid())
  userId       String
  name         String
  tokenHash    String   @unique
  projects     String[] @default([])
  environments String[] @default([])
  folders      String[] @default([])
  ipAllowlist  String[] @default([])
  expiresAt    DateTime?
  lastUsedAt   DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Organization {
  id          String       @id @default(uuid())
  name        String
  slug        String       @unique
  description String?
  ownerId     String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  memberships Membership[]
  owner       User         @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  projects    Project[]
  teams       Team[]
  invitations Invitation[]
  auditLogs   AuditLog[]

  @@index([ownerId])
  @@index([slug])
}

model Membership {
  id             String       @id @default(uuid())
  userId         String
  organizationId String
  role           Role
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@index([organizationId])
  @@index([userId])
}

model Project {
  id             String          @id @default(uuid())
  name           String
  description    String?
  organizationId String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  organization   Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  secrets        Secret[]
  teams          TeamProject[]
  members        ProjectMember[]
  auditLogs      AuditLog[]
  apiKeys        ProjectApiKey[]

  @@index([organizationId])
}

model ProjectMember {
  id        String      @id @default(uuid())
  projectId String
  userId    String
  role      ProjectRole @default(READ)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  
  project   Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([projectId, userId])
  @@index([projectId])
  @@index([userId])
}

enum ProjectRole {
  OWNER  // Full control, can delete project
  ADMIN  // Can manage members and secrets
  WRITE  // Can create/edit secrets
  READ   // View only
}

model Secret {
  id          String     @id @default(uuid())
  name        String
  description String?
  type        SecretType @default(API_KEY)
  value       String
  encrypted   Boolean    @default(true)
  projectId   String
  createdById String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  environment String     @default("development")
  folder      String?    @default("default")
  createdBy   User       @relation(fields: [createdById], references: [id], onDelete: Cascade)
  project     Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  auditLogs   AuditLog[]

  @@index([projectId])
  @@index([createdById])
  @@index([type])
  @@index([environment])
  @@index([folder])
  @@unique([projectId, name, environment, folder])
}

model Team {
  id             String           @id @default(uuid())
  name           String
  description    String?
  organizationId String
  createdById    String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdBy      User             @relation(fields: [createdById], references: [id])
  members        TeamMembership[]
  projects       TeamProject[]
  invitations    Invitation[]
  
  @@index([organizationId])
  @@index([createdById])
}

model TeamMembership {
  id        String   @id @default(uuid())
  userId    String
  teamId    String
  role      TeamRole @default(MEMBER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  
  @@unique([userId, teamId])
  @@index([teamId])
  @@index([userId])
}

model Invitation {
  id             String           @id @default(uuid())
  email          String
  organizationId String
  teamId         String?
  role           Role             @default(MEMBER)
  teamRole       TeamRole?        @default(MEMBER)
  invitedById    String
  token          String           @unique
  expiresAt      DateTime
  acceptedAt     DateTime?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  team           Team?            @relation(fields: [teamId], references: [id], onDelete: Cascade)
  invitedBy      User             @relation(fields: [invitedById], references: [id])
  
  @@index([email])
  @@index([token])
  @@index([organizationId])
  @@index([teamId])
  @@index([expiresAt])
}

enum Role {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

model TeamProject {
  id          String                   @id @default(uuid())
  teamId      String
  projectId   String
  createdAt   DateTime                 @default(now())
  updatedAt   DateTime                 @updatedAt
  
  team        Team                     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  project     Project                  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  permissions TeamProjectPermission[]
  
  @@unique([teamId, projectId])
  @@index([teamId])
  @@index([projectId])
}

model TeamProjectPermission {
  id            String            @id @default(uuid())
  teamProjectId String
  permission    ProjectPermission
  createdAt     DateTime          @default(now())
  
  teamProject   TeamProject       @relation(fields: [teamProjectId], references: [id], onDelete: Cascade)
  
  @@unique([teamProjectId, permission])
  @@index([teamProjectId])
}

enum TeamRole {
  LEAD
  MEMBER
}

enum ProjectPermission {
  READ_SECRETS
  WRITE_SECRETS
  DELETE_SECRETS
  MANAGE_ENVIRONMENTS
  MANAGE_FOLDERS
}

enum SecretType {
  API_KEY
  DATABASE_URL
  JWT_SECRET
  OAUTH_CLIENT_SECRET
  WEBHOOK_SECRET
  SSH_KEY
  CERTIFICATE
  PASSWORD
  OTHER
}

model AuditLog {
  id             String    @id @default(uuid())
  userId         String?
  organizationId String?
  projectId      String?
  secretId       String?
  
  // Event details
  eventType      String    // 'user_login', 'secret_access', 'secret_create', etc.
  action         String    // 'view', 'create', 'update', 'delete', 'success', 'failed'
  resourceName   String?   // 'Secret: API_KEY', 'Project: My App', 'User: john@example.com'
  
  // Context
  description    String?
  ipAddress      String?
  userAgent      String?
  
  // Timestamps
  createdAt      DateTime  @default(now())
  
  // Relations
  user           User?            @relation(fields: [userId], references: [id], onDelete: SetNull)
  organization   Organization?    @relation(fields: [organizationId], references: [id], onDelete: SetNull)
  project        Project?         @relation(fields: [projectId], references: [id], onDelete: SetNull)
  secret         Secret?          @relation(fields: [secretId], references: [id], onDelete: SetNull)
  
  @@index([userId])
  @@index([organizationId])
  @@index([projectId])
  @@index([eventType])
  @@index([createdAt])
}

/// API key for project-level secret access via public API
model ProjectApiKey {
  id           String   @id @default(uuid())
  projectId    String
  name         String
  tokenHash    String   @unique // sha256(token) hex
  scopes       Json?
  environments String[] @default([])
  folders      String[] @default([])
  ipAllowlist  String[] @default([])
  expiresAt    DateTime?
  lastUsedAt   DateTime?
  createdById  String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  project      Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdBy    User     @relation(fields: [createdById], references: [id], onDelete: Cascade)

  @@index([projectId])
}
